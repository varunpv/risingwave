# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- name: basic
  sql: WITH RECURSIVE t1 AS (SELECT 1 AS a UNION ALL SELECT a + 1 FROM t1 WHERE a < 10) SELECT * FROM t1;
  logical_plan: |-
    LogicalProject { exprs: [$expr1] }
    └─LogicalRecursiveUnion { id: 4 }
      ├─LogicalProject { exprs: [1:Int32] }
      │ └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
      └─LogicalProject { exprs: [(1:Int32 + 1:Int32) as $expr1] }
        └─LogicalFilter { predicate: (1:Int32 < 10:Int32) }
          └─LogicalCteRef { share_id: 0 }
- name: output column follows lhs
  sql: WITH RECURSIVE t1 AS (SELECT 1 AS a UNION ALL SELECT a + 1 FROM t1 WHERE a < 10) SELECT a FROM t1;
  logical_plan: |-
    LogicalProject { exprs: [$expr1] }
    └─LogicalRecursiveUnion { id: 4 }
      ├─LogicalProject { exprs: [1:Int32] }
      │ └─LogicalValues { rows: [[]], schema: Schema { fields: [] } }
      └─LogicalProject { exprs: [(1:Int32 + 1:Int32) as $expr1] }
        └─LogicalFilter { predicate: (1:Int32 < 10:Int32) }
          └─LogicalCteRef { share_id: 0 }
- name: with normal column
  sql: WITH RECURSIVE t(a) AS (VALUES(1) UNION ALL SELECT a + 1 FROM t WHERE a < 100) SELECT * FROM t;
  logical_plan: |-
    LogicalProject { exprs: [$expr1] }
    └─LogicalRecursiveUnion { id: 3 }
      ├─LogicalValues { rows: [[1:Int32]], schema: Schema { fields: [*VALUES*_0.column_0:Int32] } }
      └─LogicalProject { exprs: [(*VALUES*_0.column_0 + 1:Int32) as $expr1] }
        └─LogicalFilter { predicate: (*VALUES*_0.column_0 < 100:Int32) }
          └─LogicalCteRef { share_id: 0 }
- name: name a is leaked outside
  sql: WITH RECURSIVE t1 AS (SELECT 1 AS a UNION ALL SELECT a + 1 FROM t1 WHERE a < 10) SELECT a;
  binder_error: |
    Failed to bind expression: a

    Caused by:
      Item not found: Invalid column: a
